Description: SyndicateVPCAndBroker, Create a VPC and an Amazon MQ Broker for Bridge Syndicate. The SubnetBroker has an internet GW and route table that allow it to be accessed via SSH if you launch an instance with a public ip within 10.0.255.0/24.
Resources:
  SyndicateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  SyndicateVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SyndicateVPC
  SyndicateVPCDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: SyndicateVPCAttachInternetGateway
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SyndicateVPCInternetGateway
  SyndicateVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
  SyndicateVPCAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SyndicateVPC
      InternetGatewayId: !Ref SyndicateVPCInternetGateway
  SubnetBroker:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.255.0/24
      VpcId: !Ref SyndicateVPC
  SubnetLambda:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.254.0/24
      VpcId: !Ref SyndicateVPC
  SyndicateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      SubnetId: !Ref SubnetBroker
  SyndicateDynamoDBVPCEndpointSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      SubnetId: !Ref SubnetLambda
  HTTPIngresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound http and https
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 80
        FromPort: 80
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
  SSHIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound ssh traffic
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 22
        FromPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
    DependsOn:
      - SyndicateVPC
  RabbitIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound rabbitmq
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 5672
        FromPort: 5671
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
    DependsOn:
      - SyndicateVPC
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref SyndicateVPC
      RouteTableIds:
        - !Ref SyndicateVPCRouteTable
  EC2Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetLambda
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  SyndicateBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: 'false'
      BrokerName: SyndicateRabbitBroker
      DeploymentMode: SINGLE_INSTANCE
      EngineType: RabbitMQ
      EngineVersion: 3.8.11
      HostInstanceType: mq.t3.micro
      Logs:
        General: 'true'
      MaintenanceWindowStartTime:
        DayOfWeek: Monday
        TimeOfDay: '22:45'
        TimeZone: America/Los_Angeles
      PubliclyAccessible: 'false'
      SecurityGroups:
        - !Ref RabbitIngressSecurityGroup
      SubnetIds:
        - !Ref SubnetBroker
      Users:
        - ConsoleAccess: 'true'
          Password: AmazonMqPassword
          Username: AmazonMqUsername
Outputs:
  SyndicateVPC:
    Description: The Syndicate VPC
    Value: !Ref SyndicateVPC
    Export:
      Name: !Sub '${AWS::StackName}-SyndicateVPCId'
  AmqpEndpoints:
    Description: AMQP endpoint that clients should attach to
    Value: !Join [ ",", !GetAtt SyndicateBroker.AmqpEndpoints ]
    Export:
      Name: !Sub '${AWS::StackName}-AmqpEndpoint'
  RabbitIngressSecurityGroupId:
    Description: Name id the ingress security group for Rabbit
    Value:  !GetAtt RabbitIngressSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-RabbitIngressSecurityGroupId'
  SubnetLambdaId:
    Description: Id of the subnet for Lambda
    Value:  !Ref SubnetLambda
    Export:
      Name: !Sub '${AWS::StackName}-SubnetLambdaId'
  HTTPIngressSecurityGroupId:
    Description: Id of the ingress security group for HTTP
    Value:  !GetAtt HTTPIngresSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-HTTPIngressSecurityGroupId'
