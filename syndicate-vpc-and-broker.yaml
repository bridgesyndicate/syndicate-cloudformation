Description: SyndicateVPCAndBroker, Create a VPC and an Amazon MQ Broker for Bridge Syndicate. The SubnetBroker has an internet GW and route table that allow it to be accessed via SSH if you launch an instance with a public ip within 10.0.255.0/24. The 254 subnet has internet access b/c Lambda needs Dynamo. The /20 subnet does not need the internet. The 16.0 subnet needs the internet so Bungee can reach minecraft.net; the endpoints are on the 17 network, I dont think they need internet
Resources:
  SyndicateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  SyndicateVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SyndicateVPC
  SyndicateVPCDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: SyndicateVPCAttachInternetGateway
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SyndicateVPCInternetGateway
  SyndicateVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
  SyndicateVPCAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SyndicateVPC
      InternetGatewayId: !Ref SyndicateVPCInternetGateway
  SubnetBroker:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.255.0/24
      VpcId: !Ref SyndicateVPC
  SubnetLambda:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.254.0/24
      VpcId: !Ref SyndicateVPC
  SubnetMinecraft:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/20
      VpcId: !Ref SyndicateVPC
  SubnetBungee:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.16.0/24
      VpcId: !Ref SyndicateVPC
  SubnetVPCEndpoints:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.17.0/24
      VpcId: !Ref SyndicateVPC
  BrokerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      SubnetId: !Ref SubnetBroker
  LambdaSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      SubnetId: !Ref SubnetLambda
  BungeeSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SyndicateVPCRouteTable
      SubnetId: !Ref SubnetBungee
  HTTPIngresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound http and https
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 80
        FromPort: 80
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
  SSHIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound ssh traffic
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 22
        FromPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
    DependsOn:
      - SyndicateVPC
  RabbitIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound rabbitmq
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 5672
        FromPort: 5671
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
    DependsOn:
      - SyndicateVPC
  MinecraftIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound minecraft
      VpcId: !Ref SyndicateVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        ToPort: 25565
        FromPort: 25565
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
    DependsOn:
      - SyndicateVPC
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref SyndicateVPC
      RouteTableIds:
        - !Ref SyndicateVPCRouteTable
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref SyndicateVPC
      RouteTableIds:
        - !Ref SyndicateVPCRouteTable
  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  ECSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  ECRDKREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  LogEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref SyndicateVPC
      SubnetIds:
        - !Ref SubnetVPCEndpoints
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      SecurityGroupIds:
        - !Ref HTTPIngresSecurityGroup
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
  SyndicateBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: 'false'
      BrokerName: SyndicateRabbitBroker
      DeploymentMode: SINGLE_INSTANCE
      EngineType: RabbitMQ
      EngineVersion: 3.8.11
      HostInstanceType: mq.t3.micro
      Logs:
        General: 'true'
      MaintenanceWindowStartTime:
        DayOfWeek: Monday
        TimeOfDay: '22:45'
        TimeZone: America/Los_Angeles
      PubliclyAccessible: 'false'
      SecurityGroups:
        - !Ref RabbitIngressSecurityGroup
      SubnetIds:
        - !Ref SubnetBroker
      Users:
        - ConsoleAccess: 'true'
          Password: AmazonMqPassword
          Username: AmazonMqUsername
  SyndicateECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: SyndicateECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
  SyndicateBungeeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: arn:aws:iam::595508394202:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: SyndicateBungeeTask
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/bridge-dev-server
              awslogs-region: us-west-2
              awslogs-stream-prefix: ecs
          PortMappings:
            - HostPort: 25565
              Protocol: tcp
              ContainerPort: 25565
          Image: 595508394202.dkr.ecr.us-west-2.amazonaws.com/syn-bungee-servers:latest
          Environment:
            - Name: RABBIT_URI
              Value: !ImportValue
                'SyndicateVPCAndBroker-AmqpEndpoint'
      PlacementConstraints: []
      Memory: 1024
      TaskRoleArn: arn:aws:iam::595508394202:role/syndicate-bridge-dev-server-task-role
      Family: SyndicateBungeeTaskDefinition
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
  SyndicateBungeeECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: SyndicateBungeeECSService
      Cluster: !Ref SyndicateECSCluster
      DesiredCount: 0
      EnableExecuteCommand: 'true'
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: SyndicateBungeeTask
          ContainerPort: 25565
          TargetGroupArn: !Ref BungeeLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref MinecraftIngressSecurityGroup
          Subnets:
            - !Ref SubnetBungee
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref SyndicateBungeeTaskDefinition
    DependsOn:
      - BungeeLoadBalancerMinecraftListener
  SyndicateBungeeECSServiceV02:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: SyndicateBungeeECSServiceV02
      Cluster: !Ref SyndicateECSCluster
      DesiredCount: 0
      EnableExecuteCommand: 'true'
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: SyndicateBungeeTask
          ContainerPort: 25565
          TargetGroupArn: !Ref BungeeLoadBalancerTargetGroupV02
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref MinecraftIngressSecurityGroup
          Subnets:
            - !Ref SubnetBungee
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref SyndicateBungeeTaskDefinition
    DependsOn:
      - BungeeLoadBalancerMinecraftListenerV02
  BungeeLoadBalancerElasticIP:
    Type: AWS::EC2::EIP
  BungeeLoadBalancerElasticIPV02:
    Type: AWS::EC2::EIP
  BungeeLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SubnetMappings:
        - SubnetId: !Ref SubnetBungee
          AllocationId: !GetAtt BungeeLoadBalancerElasticIP.AllocationId
      Type: network
  BungeeLoadBalancerV02:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SubnetMappings:
        - SubnetId: !Ref SubnetBungee
          AllocationId: !GetAtt BungeeLoadBalancerElasticIPV02.AllocationId
      Type: network
  BungeeLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: TCP
      Port: 25565
      VpcId: !Ref SyndicateVPC
  BungeeLoadBalancerTargetGroupV02:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: TCP
      Port: 25565
      VpcId: !Ref SyndicateVPC
  BungeeLoadBalancerMinecraftListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
         LoadBalancerArn: !Ref BungeeLoadBalancer
         DefaultActions:
           - Type: forward
             TargetGroupArn: !Ref BungeeLoadBalancerTargetGroup
         Port: 25565
         Protocol: "TCP"
  BungeeLoadBalancerMinecraftListenerV02:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
         LoadBalancerArn: !Ref BungeeLoadBalancerV02
         DefaultActions:
           - Type: forward
             TargetGroupArn: !Ref BungeeLoadBalancerTargetGroupV02
         Port: 25565
         Protocol: "TCP"
  NATSubnetBungee:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      SubnetId: !Ref SubnetBungee
Outputs:
  SyndicateVPC:
    Description: The Syndicate VPC
    Value: !Ref SyndicateVPC
    Export:
      Name: !Sub '${AWS::StackName}-SyndicateVPCId'
  AmqpEndpoints:
    Description: AMQP endpoint that clients should attach to
    Value: !Join [ ",", !GetAtt SyndicateBroker.AmqpEndpoints ]
    Export:
      Name: !Sub '${AWS::StackName}-AmqpEndpoint'
  RabbitIngressSecurityGroupId:
    Description: Name id the ingress security group for Rabbit
    Value:  !GetAtt RabbitIngressSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-RabbitIngressSecurityGroupId'
  SubnetLambdaId:
    Description: Id of the subnet for Lambda
    Value:  !Ref SubnetLambda
    Export:
      Name: !Sub '${AWS::StackName}-SubnetLambdaId'
  HTTPIngressSecurityGroupId:
    Description: Id of the ingress security group for HTTP
    Value:  !GetAtt HTTPIngresSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-HTTPIngressSecurityGroupId'
